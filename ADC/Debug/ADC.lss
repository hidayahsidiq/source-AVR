
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  0000022c  2**0
                  ALLOC
  2 .stab         00000954  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000016e  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000086  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000026c  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018f  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  0000118f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000150  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  0000165f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  74:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <adc_init>:
 
return 0;
}
 
void adc_init(void){
 ADCSRA |= ((1<<ADPS2)|(1<<ADPS1));    //16Mhz/128 = 125Khz the ADC reference clock
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	86 60       	ori	r24, 0x06	; 6
  80:	86 b9       	out	0x06, r24	; 6
 ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
  82:	3e 9a       	sbi	0x07, 6	; 7
 ADCSRA |= (1<<ADEN);                //Turn on ADC
  84:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  86:	36 9a       	sbi	0x06, 6	; 6
}
  88:	08 95       	ret

0000008a <read_adc>:
 
uint16_t read_adc(uint8_t channel){
 ADMUX &= 0xF0;                    //Clear the older channel that was read
  8a:	97 b1       	in	r25, 0x07	; 7
  8c:	90 7f       	andi	r25, 0xF0	; 240
  8e:	97 b9       	out	0x07, r25	; 7
 ADMUX |= channel;                //Defines the new ADC channel to be read
  90:	97 b1       	in	r25, 0x07	; 7
  92:	89 2b       	or	r24, r25
  94:	87 b9       	out	0x07, r24	; 7
 ADCSRA |= (1<<ADSC);                //Starts a new conversion
  96:	36 9a       	sbi	0x06, 6	; 6
 while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
  98:	36 99       	sbic	0x06, 6	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <read_adc+0xe>
 return ADCW;                    //Returns the ADC value of the chosen channel
  9c:	24 b1       	in	r18, 0x04	; 4
  9e:	35 b1       	in	r19, 0x05	; 5
}
  a0:	82 2f       	mov	r24, r18
  a2:	93 2f       	mov	r25, r19
  a4:	08 95       	ret

000000a6 <USART_init>:
 
void USART_init(void){
 
 UBRRH = (uint8_t)(BAUD_PRESCALLER>>8);
  a6:	10 bc       	out	0x20, r1	; 32
 UBRRL = (uint8_t)(BAUD_PRESCALLER);
  a8:	83 e3       	ldi	r24, 0x33	; 51
  aa:	89 b9       	out	0x09, r24	; 9
 UCSRB = (1<<RXEN)|(1<<TXEN);
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10
 UCSRC = (3<<UCSZ0);
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 bd       	out	0x20, r24	; 32
}
  b4:	08 95       	ret

000000b6 <USART_send>:
 
void USART_send( unsigned char data){
 
 while(!(UCSRA & (1<<UDRE)));
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_send>
 UDR = data;
  ba:	8c b9       	out	0x0c, r24	; 12
 
}
  bc:	08 95       	ret

000000be <USART_putstring>:
 
void USART_putstring(char* StringPtr){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
 
while(*StringPtr != 0x00){
  c4:	88 81       	ld	r24, Y
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <USART_putstring+0x18>
 while(!(UCSRA & (1<<UDRE)));
 UDR = data;
 
}
 
void USART_putstring(char* StringPtr){
  ca:	21 96       	adiw	r28, 0x01	; 1
 
while(*StringPtr != 0x00){
 USART_send(*StringPtr);
  cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_send>
 
}
 
void USART_putstring(char* StringPtr){
 
while(*StringPtr != 0x00){
  d0:	89 91       	ld	r24, Y+
  d2:	88 23       	and	r24, r24
  d4:	d9 f7       	brne	.-10     	; 0xcc <USART_putstring+0xe>
 USART_send(*StringPtr);
 StringPtr++;}
 
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analogic channel/pin
void USART_init(void);            //Function to initialize and configure the USART/serial
void USART_send( unsigned char data);    //Function that sends a char over the serial port
void USART_putstring(char* StringPtr);    //Function that sends a string over the serial port
 
int main(void){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
adc_init();        //Setup the ADC
  e0:	0e 94 3e 00 	call	0x7c	; 0x7c <adc_init>
USART_init();        //Setup the USART
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
for(;;){        //Our infinite loop
 
 //USART_putstring("Reading channel ");
 //USART_putstring(" : ");            //Just to keep things pretty
 adc_value = read_adc(0);        //Read one ADC channel
 itoa(adc_value, buffer, 10);        //Convert the read value to an ascii string
  e8:	c3 e6       	ldi	r28, 0x63	; 99
  ea:	d0 e0       	ldi	r29, 0x00	; 0
 
for(;;){        //Our infinite loop
 
 //USART_putstring("Reading channel ");
 //USART_putstring(" : ");            //Just to keep things pretty
 adc_value = read_adc(0);        //Read one ADC channel
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 45 00 	call	0x8a	; 0x8a <read_adc>
  f2:	90 93 62 00 	sts	0x0062, r25
  f6:	80 93 61 00 	sts	0x0061, r24
 itoa(adc_value, buffer, 10);        //Convert the read value to an ascii string
  fa:	be 01       	movw	r22, r28
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	0e 94 95 00 	call	0x12a	; 0x12a <itoa>
 USART_putstring(buffer);        //Send the converted value to the terminal
 104:	ce 01       	movw	r24, r28
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	94 e3       	ldi	r25, 0x34	; 52
 10e:	ac e0       	ldi	r26, 0x0C	; 12
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	a0 40       	sbci	r26, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x34>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x3e>
 11a:	00 00       	nop
 //USART_putstring("  ");            //Some more formatting
 _delay_ms(500);                //You can tweak this value to have slower or faster readings or for max speed remove this line
 
 USART_send('\r');
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_send>
 USART_send('\n');                //This two lines are to tell to the terminal to change line
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_send>
 128:	e1 cf       	rjmp	.-62     	; 0xec <main+0x10>

0000012a <itoa>:
 12a:	fb 01       	movw	r30, r22
 12c:	9f 01       	movw	r18, r30
 12e:	e8 94       	clt
 130:	42 30       	cpi	r20, 0x02	; 2
 132:	c4 f0       	brlt	.+48     	; 0x164 <itoa+0x3a>
 134:	45 32       	cpi	r20, 0x25	; 37
 136:	b4 f4       	brge	.+44     	; 0x164 <itoa+0x3a>
 138:	4a 30       	cpi	r20, 0x0A	; 10
 13a:	29 f4       	brne	.+10     	; 0x146 <itoa+0x1c>
 13c:	97 fb       	bst	r25, 7
 13e:	1e f4       	brtc	.+6      	; 0x146 <itoa+0x1c>
 140:	90 95       	com	r25
 142:	81 95       	neg	r24
 144:	9f 4f       	sbci	r25, 0xFF	; 255
 146:	64 2f       	mov	r22, r20
 148:	77 27       	eor	r23, r23
 14a:	0e 94 c6 00 	call	0x18c	; 0x18c <__udivmodhi4>
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	8a 33       	cpi	r24, 0x3A	; 58
 152:	0c f0       	brlt	.+2      	; 0x156 <itoa+0x2c>
 154:	89 5d       	subi	r24, 0xD9	; 217
 156:	81 93       	st	Z+, r24
 158:	cb 01       	movw	r24, r22
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	a1 f7       	brne	.-24     	; 0x146 <itoa+0x1c>
 15e:	16 f4       	brtc	.+4      	; 0x164 <itoa+0x3a>
 160:	5d e2       	ldi	r21, 0x2D	; 45
 162:	51 93       	st	Z+, r21
 164:	10 82       	st	Z, r1
 166:	c9 01       	movw	r24, r18
 168:	0c 94 b6 00 	jmp	0x16c	; 0x16c <strrev>

0000016c <strrev>:
 16c:	dc 01       	movw	r26, r24
 16e:	fc 01       	movw	r30, r24
 170:	67 2f       	mov	r22, r23
 172:	71 91       	ld	r23, Z+
 174:	77 23       	and	r23, r23
 176:	e1 f7       	brne	.-8      	; 0x170 <strrev+0x4>
 178:	32 97       	sbiw	r30, 0x02	; 2
 17a:	04 c0       	rjmp	.+8      	; 0x184 <strrev+0x18>
 17c:	7c 91       	ld	r23, X
 17e:	6d 93       	st	X+, r22
 180:	70 83       	st	Z, r23
 182:	62 91       	ld	r22, -Z
 184:	ae 17       	cp	r26, r30
 186:	bf 07       	cpc	r27, r31
 188:	c8 f3       	brcs	.-14     	; 0x17c <strrev+0x10>
 18a:	08 95       	ret

0000018c <__udivmodhi4>:
 18c:	aa 1b       	sub	r26, r26
 18e:	bb 1b       	sub	r27, r27
 190:	51 e1       	ldi	r21, 0x11	; 17
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <__udivmodhi4_ep>

00000194 <__udivmodhi4_loop>:
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	a6 17       	cp	r26, r22
 19a:	b7 07       	cpc	r27, r23
 19c:	10 f0       	brcs	.+4      	; 0x1a2 <__udivmodhi4_ep>
 19e:	a6 1b       	sub	r26, r22
 1a0:	b7 0b       	sbc	r27, r23

000001a2 <__udivmodhi4_ep>:
 1a2:	88 1f       	adc	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	5a 95       	dec	r21
 1a8:	a9 f7       	brne	.-22     	; 0x194 <__udivmodhi4_loop>
 1aa:	80 95       	com	r24
 1ac:	90 95       	com	r25
 1ae:	bc 01       	movw	r22, r24
 1b0:	cd 01       	movw	r24, r26
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
